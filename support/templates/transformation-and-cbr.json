{
    "kind": "Template",
    "apiVersion": "v1",
    "metadata": {
        "annotations": {
            "description": "Template for transformation and content-based routing application.",
            "iconClass": "icon-java",
            "tags": "java"
        },
        "name": "rest-soap-transformation"
    },
    "labels": {
        "template": "rest-soap-transformation"
    },
    "parameters": [
        {
            "description": "The name for the application.",
            "name": "APPLICATION_NAME",
            "value": "transformation-and-cbr",
            "required": true
        },
        {
            "description": "Git source URI for application",
            "name": "SOURCE_REPOSITORY_URL",
            "value": "https://github.com/sigreen/transformation-and-cbr.git",
            "required": true
        },
        {
            "description": "Git branch/tag reference",
            "name": "SOURCE_REPOSITORY_REF",
            "value": "master",
            "required": false
        },
		{
			"description": "Git project subdirectory",
			"name": "CONTEXT_DIR",
			"value": "",
			"required": false
		},
        {
            "description": "Base image for which new images are built upon.",
            "name": "BUILDER_IMAGE",
			"value": "registry.access.redhat.com/fuse7/fuse-java-openshift:1.1",
            "required": true
        }
    ],
	"objects": [
		{
			"kind": "ImageStream",
			"apiVersion": "v1",
			"metadata": {
				"name": "${APPLICATION_NAME}",
				"labels": {
					"application": "${APPLICATION_NAME}"
				}
			}
		},
		{
			"kind": "BuildConfig",
			"apiVersion": "v1",
			"metadata": {
				"name": "${APPLICATION_NAME}",
				"labels": {
					"application": "${APPLICATION_NAME}"
				}
			},
			"spec": {
				"source": {
					"type": "Git",
					"git": {
						"uri": "${SOURCE_REPOSITORY_URL}",
						"ref": "${SOURCE_REPOSITORY_REF}"
					},
					"contextDir": "${CONTEXT_DIR}"
				},
				"strategy": {
					"type": "Source",
					"sourceStrategy": {
						"forcePull": true,
						"from": {
							"kind": "DockerImage",
							"name": "${BUILDER_IMAGE}"
						}
					}
				},
				"output": {
					"to": {
						"kind": "ImageStreamTag",
						"name": "${APPLICATION_NAME}:latest"
					}
				},
				"triggers": [{
						"type": "ImageChange",
						"imageChange": {}
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		},
		{
			"kind": "DeploymentConfig",
			"apiVersion": "v1",
			"metadata": {
				"name": "${APPLICATION_NAME}",
				"labels": {
					"application": "${APPLICATION_NAME}"
				}
			},
			"spec": {
				"strategy": {
					"type": "Rolling",
					"rollingParams": {
						"updatePeriodSeconds": 1,
						"intervalSeconds": 1,
						"timeoutSeconds": 10800,
						"maxUnavailable": "25%",
						"maxSurge": "25%"
					}
				},
				"triggers": [{
						"type": "ImageChange",
						"imageChangeParams": {
							"automatic": true,
							"containerNames": [
								"${APPLICATION_NAME}"
							],
							"from": {
								"kind": "ImageStreamTag",
								"name": "${APPLICATION_NAME}:latest"
							}
						}
					},
					{
						"type": "ConfigChange"
					}
				],
				"replicas": 1,
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}"
				},
				"template": {
					"metadata": {
						"name": "${APPLICATION_NAME}",
						"labels": {
							"deploymentConfig": "${APPLICATION_NAME}",
							"application": "${APPLICATION_NAME}"
						}
					},
					"spec": {
						"terminationGracePeriodSeconds": 60,
						"restartPolicy": "Always",
						"containers": [{
							"name": "${APPLICATION_NAME}",
							"image": "${APPLICATION_NAME}",
							"imagePullPolicy": "Always",
							"ports": [{
									"name": "jolokia",
									"containerPort": 8778,
									"protocol": "TCP"
								}
							],
							"env": [{
									"name": "KUBERNETES_NAMESPACE",
									"valueFrom": {
										"fieldRef": {
											"apiVersion": "v1",
											"fieldPath": "metadata.namespace"
										}
									}
								},
								{
									"name": "JAVA_APP_DIR",
									"value": "/deployments"
								}
							],
							"livenessProbe": {
								"httpGet": {
									"path": "/health",
									"port": 8081,
									"scheme": "HTTP"
								},
								"initialDelaySeconds": 180,
								"timeoutSeconds": 1,
								"periodSeconds": 10,
								"successThreshold": 1,
								"failureThreshold": 3
							},
							"readinessProbe": {
								"httpGet": {
									"path": "/health",
									"port": 8081,
									"scheme": "HTTP"
								},
								"initialDelaySeconds": 10,
								"timeoutSeconds": 1,
								"periodSeconds": 10,
								"successThreshold": 1,
								"failureThreshold": 3
							}
						}]
					}
				}
			}
		}
	]
}